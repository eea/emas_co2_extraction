// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package backup2.intranetwebservicesco2_0_1;

import routines.DataOperation;
import routines.OpenStreetMap;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.GetRandomPhoneNum;
import routines.Mathematical;
import routines.GeometryUtility;
import routines.Numeric;
import routines.Utility;
import routines.GeoOperation;
import routines.GeometryOperation;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.DemoRoutines;
import routines.PopulateFromDynamic;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: intranetWebServicesCo2 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status 
 */
public class intranetWebServicesCo2 implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(serviceUrl != null){
				
					this.setProperty("serviceUrl", serviceUrl.toString());
				
			}
			
			if(tmpDir != null){
				
					this.setProperty("tmpDir", tmpDir.toString());
				
			}
			
			if(outputDir != null){
				
					this.setProperty("outputDir", outputDir.toString());
				
			}
			
			if(intranetUsername != null){
				
					this.setProperty("intranetUsername", intranetUsername.toString());
				
			}
			
			if(intranetPassword != null){
				
					this.setProperty("intranetPassword", intranetPassword.toString());
				
			}
			
		}

public String serviceUrl;
public String getServiceUrl(){
	return this.serviceUrl;
}
public String tmpDir;
public String getTmpDir(){
	return this.tmpDir;
}
public String outputDir;
public String getOutputDir(){
	return this.outputDir;
}
public String intranetUsername;
public String getIntranetUsername(){
	return this.intranetUsername;
}
public String intranetPassword;
public String getIntranetPassword(){
	return this.intranetPassword;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "intranetWebServicesCo2";
	private final String projectName = "BACKUP2";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			 globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent);
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				intranetWebServicesCo2.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(intranetWebServicesCo2.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLoop_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSOAP_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterColumns_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractXMLField_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLoop_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		





public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";

	
		int tos_count_tFileDelete_1 = 0;
		
    	class BytesLimit65535_tFileDelete_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileDelete_1().limitLog4jByte();

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File(context.outputDir + "/emas_co2.tsv");
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
    	}else{
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
    	}
    }else{
    	globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",context.outputDir + "/emas_co2.tsv");
    
     
 

 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tLoop_1Process(globalMap);



/**
 * [tFileDelete_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_intranetWebServicesCo2 = new byte[0];
    static byte[] commonByteArray_BACKUP2_intranetWebServicesCo2 = new byte[0];

	
			    public Integer programme_year;

				public Integer getProgramme_year () {
					return this.programme_year;
				}
				
			    public String ProjectCode;

				public String getProjectCode () {
					return this.ProjectCode;
				}
				
			    public Float CO2_kg;

				public Float getCO2_kg () {
					return this.CO2_kg;
				}
				
			    public Float KM_travelled;

				public Float getKM_travelled () {
					return this.KM_travelled;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_intranetWebServicesCo2.length) {
				if(length < 1024 && commonByteArray_BACKUP2_intranetWebServicesCo2.length == 0) {
   					commonByteArray_BACKUP2_intranetWebServicesCo2 = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_intranetWebServicesCo2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_intranetWebServicesCo2, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_intranetWebServicesCo2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_intranetWebServicesCo2) {

        	try {

        		int length = 0;
		
						this.programme_year = readInteger(dis);
					
					this.ProjectCode = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CO2_kg = null;
           				} else {
           			    	this.CO2_kg = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.KM_travelled = null;
           				} else {
           			    	this.KM_travelled = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.programme_year,dos);
					
					// String
				
						writeString(this.ProjectCode,dos);
					
					// Float
				
						if(this.CO2_kg == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CO2_kg);
		            	}
					
					// Float
				
						if(this.KM_travelled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.KM_travelled);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("programme_year="+String.valueOf(programme_year));
		sb.append(",ProjectCode="+ProjectCode);
		sb.append(",CO2_kg="+String.valueOf(CO2_kg));
		sb.append(",KM_travelled="+String.valueOf(KM_travelled));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_intranetWebServicesCo2 = new byte[0];
    static byte[] commonByteArray_BACKUP2_intranetWebServicesCo2 = new byte[0];

	
			    public String Body;

				public String getBody () {
					return this.Body;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_intranetWebServicesCo2.length) {
				if(length < 1024 && commonByteArray_BACKUP2_intranetWebServicesCo2.length == 0) {
   					commonByteArray_BACKUP2_intranetWebServicesCo2 = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_intranetWebServicesCo2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_intranetWebServicesCo2, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_intranetWebServicesCo2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_intranetWebServicesCo2) {

        	try {

        		int length = 0;
		
					this.Body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Body="+Body);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_intranetWebServicesCo2 = new byte[0];
    static byte[] commonByteArray_BACKUP2_intranetWebServicesCo2 = new byte[0];

	
			    public String Header;

				public String getHeader () {
					return this.Header;
				}
				
			    public String Body;

				public String getBody () {
					return this.Body;
				}
				
			    public String Fault;

				public String getFault () {
					return this.Fault;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_intranetWebServicesCo2.length) {
				if(length < 1024 && commonByteArray_BACKUP2_intranetWebServicesCo2.length == 0) {
   					commonByteArray_BACKUP2_intranetWebServicesCo2 = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_intranetWebServicesCo2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_intranetWebServicesCo2, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_intranetWebServicesCo2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_intranetWebServicesCo2) {

        	try {

        		int length = 0;
		
					this.Header = readString(dis);
					
					this.Body = readString(dis);
					
					this.Fault = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Header,dos);
					
					// String
				
						writeString(this.Body,dos);
					
					// String
				
						writeString(this.Fault,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Header="+Header);
		sb.append(",Body="+Body);
		sb.append(",Fault="+Fault);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_intranetWebServicesCo2 = new byte[0];
    static byte[] commonByteArray_BACKUP2_intranetWebServicesCo2 = new byte[0];

	
			    public String Header;

				public String getHeader () {
					return this.Header;
				}
				
			    public String Body;

				public String getBody () {
					return this.Body;
				}
				
			    public String Fault;

				public String getFault () {
					return this.Fault;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_intranetWebServicesCo2.length) {
				if(length < 1024 && commonByteArray_BACKUP2_intranetWebServicesCo2.length == 0) {
   					commonByteArray_BACKUP2_intranetWebServicesCo2 = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_intranetWebServicesCo2 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_intranetWebServicesCo2, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_intranetWebServicesCo2, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_intranetWebServicesCo2) {

        	try {

        		int length = 0;
		
					this.Header = readString(dis);
					
					this.Body = readString(dis);
					
					this.Fault = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Header,dos);
					
					// String
				
						writeString(this.Body,dos);
					
					// String
				
						writeString(this.Fault,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Header="+Header);
		sb.append(",Body="+Body);
		sb.append(",Fault="+Fault);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLoop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLoop_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();
row20Struct row17 = row20;
row18Struct row18 = new row18Struct();
row19Struct row19 = new row19Struct();



	
	/**
	 * [tLoop_1 begin ] start
	 */

				
			int NB_ITERATE_tSOAP_5 = 0; //for statistics
			

	
		
		ok_Hash.put("tLoop_1", false);
		start_Hash.put("tLoop_1", System.currentTimeMillis());
		
	
	currentComponent="tLoop_1";

	
		int tos_count_tLoop_1 = 0;
		
    	class BytesLimit65535_tLoop_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLoop_1().limitLog4jByte();

int current_iteration_tLoop_1 = 0;

for(int looptLoop_1 =2010; looptLoop_1<=TalendDate.getPartOfDate("YEAR", TalendDate.getCurrentDate() ); looptLoop_1=looptLoop_1+1){
	
current_iteration_tLoop_1++;
globalMap.put("tLoop_1_CURRENT_VALUE",looptLoop_1);
globalMap.put("tLoop_1_CURRENT_ITERATION",current_iteration_tLoop_1);


 



/**
 * [tLoop_1 begin ] stop
 */
	
	/**
	 * [tLoop_1 main ] start
	 */

	

	
	
	currentComponent="tLoop_1";

	

 


	tos_count_tLoop_1++;

/**
 * [tLoop_1 main ] stop
 */
	NB_ITERATE_tSOAP_5++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row20", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row19", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row18", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate6", 1, "exec" + NB_ITERATE_tSOAP_5);
					//Thread.sleep(1000);
				}				
			





	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row19" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.outputDir + "/emas_co2.tsv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitEvery_tFileOutputDelimited_1 = 1000;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */"\t"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"UTF-8"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("programme_year");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ProjectCode");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CO2_kg");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("KM_travelled");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tExtractXMLField_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractXMLField_5", false);
		start_Hash.put("tExtractXMLField_5", System.currentTimeMillis());
		
	
	currentComponent="tExtractXMLField_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row18" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tExtractXMLField_5 = 0;
		
    	class BytesLimit65535_tExtractXMLField_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tExtractXMLField_5().limitLog4jByte();

int nb_line_tExtractXMLField_5 = 0;

class NameSpaceTool_tExtractXMLField_5 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                   	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    /**
	 *	the regex for the xpath like that : 
	 *	case 1 : functionA(locationXPathExpression) 
	 *	case 2 : fn:functionA(locationXPathExpression) 
	 *	case 3 : functionA(functionB(locationXPathExpression))
	 *	case 4 : fn:functionA(fn:functionB(locationXPathExpression))
	 *	and like that.
	*/
	private java.util.regex.Pattern simpleFunctionPattern;
	private StringBuffer stringBuffer;
	private java.util.Map<String,String> resultCache;
	
	public String addDefaultNSPrefix(final String xpathExpression, String loopPath) {
	    if (defualtNSPath.size() < 1) {
        	return xpathExpression;
    	}
    	
    	if(resultCache == null) {
    		resultCache = new java.util.HashMap<String,String>();
    	}
    	
    	String resultXpathExpression = resultCache.get(xpathExpression);
		if(resultXpathExpression!=null) {
    		return resultXpathExpression;
    	}
    	
    	String locationPathExpression = xpathExpression;
    	
    	if(simpleFunctionPattern == null) {
    		simpleFunctionPattern = java.util.regex.Pattern.compile("([a-zA-z0-9]+:)?[a-zA-Z]+-?[A-Za-z]+\\(.*\\)");
    	}
    	
    	boolean isSimpleFunctionXPath = simpleFunctionPattern.matcher(xpathExpression).matches();
    	String tail = null;
    	if(isSimpleFunctionXPath) {
			int start = xpathExpression.lastIndexOf('(');
			int end = xpathExpression.indexOf(')');
			if(start < end) {
			    if(stringBuffer == null) {
    				stringBuffer = new StringBuffer();
    			}
				locationPathExpression = xpathExpression.substring(start+1,end);
				stringBuffer.append(xpathExpression.substring(0,start+1));
				tail = xpathExpression.substring(end);
			} else {
				isSimpleFunctionXPath = false;
			}
    	}
    	
    	locationPathExpression = addDefaultNSPrefixForLocationXPathExpression(locationPathExpression,loopPath);
    	
    	resultXpathExpression = locationPathExpression;
    	
    	if(isSimpleFunctionXPath) {
        	stringBuffer.append(locationPathExpression);
    		stringBuffer.append(tail);
    		resultXpathExpression = stringBuffer.toString();
    		stringBuffer.setLength(0);
        }
    	
    	resultCache.put(xpathExpression,resultXpathExpression);
    	return resultXpathExpression;
	}
	
    private String addDefaultNSPrefixForLocationXPathExpression(String path, String loopPath) {
    	String fullPath = loopPath;
    	if(!path.equals(fullPath)){
        	for (String tmp : path.split("/")) {
        		if (("..").equals(tmp)) {
                    fullPath = fullPath.substring(0, fullPath.lastIndexOf("/"));
                } else {
                    fullPath += "/" + tmp;
                }
        	}
        }
    	int[] indexs = new int[fullPath.split("/").length - 1];
        java.util.Arrays.fill(indexs, -1);
        int length = 0;
        for (int i = 0; i < defualtNSPath.size(); i++) {
            if (defualtNSPath.get(i).length() > length && fullPath.startsWith(defualtNSPath.get(i))) {
                java.util.Arrays.fill(indexs, defualtNSPath.get(i).split("/").length - 2, indexs.length, i);
                length = defualtNSPath.get(i).length();
            }
        }
    
        StringBuilder newPath = new StringBuilder();
        String[] pathStrs = path.split("/");
        for (int i = 0; i < pathStrs.length; i++) {
            String tmp = pathStrs[i];
            if (newPath.length() > 0) {
                newPath.append("/");
            }
            if (tmp.length() > 0 && tmp.indexOf(":") == -1 && tmp.indexOf(".") == -1 /*&& tmp.indexOf("@") == -1*/) {
                int index = indexs[i + indexs.length - pathStrs.length];
                if (index >= 0) {
                	//==== add by wliu to support both filter and functions==
    				if(tmp.indexOf("[")>0 && tmp.indexOf("]")>tmp.indexOf("[")){//include filter
    					String tmpStr=replaceElementWithNS(tmp,"pre"+index+":");
    					newPath.append(tmpStr);
    				}else{
    					if(tmp.indexOf("@") != -1 || tmp.indexOf("(")<tmp.indexOf(")")){  // include attribute
    						newPath.append(tmp);
    					}else{
    				//==add end=======	
                    		newPath.append("pre").append(index).append(":").append(tmp);
                    	}
                    }                    
                } else {
                    newPath.append(tmp);
                }
            } else {
                newPath.append(tmp);
            }
        }
        return newPath.toString();
    }
    
	private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
    private java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(matches);
    
	private String replaceElementWithNS(String global, String pre){

        java.util.regex.Matcher match = pattern.matcher(global);
        StringBuffer sb = new StringBuffer();
        match.reset();
        while (match.find()) {
            String group = match.group();
            String tmp = "";
            if (group.toLowerCase().matches("\\b(div|mod|and|or)\\b.*") || group.matches("@.*")) {
                tmp = group;
            } else {
                tmp = tmp + pre + group;
            }
            match.appendReplacement(sb, tmp);
        }
        match.appendTail(sb);
        
        return sb.toString();
	}
	
}

class XML_API_tExtractXMLField_5{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}

XML_API_tExtractXMLField_5 xml_api_tExtractXMLField_5 = new XML_API_tExtractXMLField_5();
 



/**
 * [tExtractXMLField_5 begin ] stop
 */



	
	/**
	 * [tFilterColumns_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterColumns_5", false);
		start_Hash.put("tFilterColumns_5", System.currentTimeMillis());
		
	
	currentComponent="tFilterColumns_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row17" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterColumns_5 = 0;
		
    	class BytesLimit65535_tFilterColumns_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterColumns_5().limitLog4jByte();


 int nb_line_tFilterColumns_5 = 0;
 



/**
 * [tFilterColumns_5 begin ] stop
 */



	
	/**
	 * [tLogRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_6", false);
		start_Hash.put("tLogRow_6", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row20" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_6 = 0;
		
    	class BytesLimit65535_tLogRow_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogRow_6().limitLog4jByte();

 



/**
 * [tLogRow_6 begin ] stop
 */



	
	/**
	 * [tSOAP_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tSOAP_5", false);
		start_Hash.put("tSOAP_5", System.currentTimeMillis());
		
	
	currentComponent="tSOAP_5";

	
		int tos_count_tSOAP_5 = 0;
		
    	class BytesLimit65535_tSOAP_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSOAP_5().limitLog4jByte();
 org.talend.soap.SOAPUtil soapUtil_tSOAP_5 = new org.talend.soap.SOAPUtil();


	final String decryptedPassword_tSOAP_5 = context.intranetPassword; 

soapUtil_tSOAP_5.setBasicAuth(context.intranetUsername,decryptedPassword_tSOAP_5);
 



/**
 * [tSOAP_5 begin ] stop
 */
	
	/**
	 * [tSOAP_5 main ] start
	 */

	

	
	
	currentComponent="tSOAP_5";

	

		
		
			soapUtil_tSOAP_5.invokeSOAP(org.talend.soap.SOAPUtil.SOAP11,context.serviceUrl,"http://intranet.eea.europa.eu/ExportEMAS_XML","<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">    <soap:Body>      <ExportEMAS_XML xmlns=\"http://intranet.eea.europa.eu/\">        <Programme_Year>" + ((Integer)globalMap.get("tLoop_1_CURRENT_VALUE")) + "</Programme_Year>      </ExportEMAS_XML>    </soap:Body>  </soap:Envelope>");
		
		
	

	// for output
			
				row20 = new row20Struct();
				
					row20.Header = soapUtil_tSOAP_5.getReHeaderMessage();
					if(soapUtil_tSOAP_5.hasFault()){
						row20.Fault = soapUtil_tSOAP_5.getReFaultMessage();
					}else{
						row20.Body = soapUtil_tSOAP_5.getReBodyMessage();
					}
				
        


 


	tos_count_tSOAP_5++;

/**
 * [tSOAP_5 main ] stop
 */

	
	/**
	 * [tLogRow_6 main ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

			//row20
			//row20


			
				if(execStat){
					runStat.updateStatOnConnection("row20"+iterateId,1, 1);
				} 
			

		

 
     row17 = row20;


	tos_count_tLogRow_6++;

/**
 * [tLogRow_6 main ] stop
 */

	
	/**
	 * [tFilterColumns_5 main ] start
	 */

	

	
	
	currentComponent="tFilterColumns_5";

	

			//row17
			//row17


			
				if(execStat){
					runStat.updateStatOnConnection("row17"+iterateId,1, 1);
				} 
			

		
	

	row18.Body = row17.Body;

	
    nb_line_tFilterColumns_5++;

 


	tos_count_tFilterColumns_5++;

/**
 * [tFilterColumns_5 main ] stop
 */

	
	/**
	 * [tExtractXMLField_5 main ] start
	 */

	

	
	
	currentComponent="tExtractXMLField_5";

	

			//row18
			//row18


			
				if(execStat){
					runStat.updateStatOnConnection("row18"+iterateId,1, 1);
				} 
			

		

	String xmlStr_tExtractXMLField_5 = null;
	routines.system.Document xmlDocument_tExtractXMLField_5 = null;
	if(row18.Body!=null){
				xmlStr_tExtractXMLField_5 = row18.Body;
	}
			if(xmlStr_tExtractXMLField_5!=null){// C_01
row19 = null;
	NameSpaceTool_tExtractXMLField_5 nsTool_tExtractXMLField_5 = new NameSpaceTool_tExtractXMLField_5();
    org.dom4j.io.SAXReader reader_tExtractXMLField_5 = new org.dom4j.io.SAXReader();
	
    org.dom4j.Document doc_tExtractXMLField_5 = null;
    java.util.HashMap xmlNameSpaceMap_tExtractXMLField_5 = null;
    org.dom4j.XPath x_tExtractXMLField_5 = null;
    java.util.List<org.dom4j.tree.AbstractNode> nodeList_tExtractXMLField_5 = null;
		String loopQuery_tExtractXMLField_5 = "/ExportEMAS_XMLResponse/ExportEMAS_XMLResult/diffgr:diffgram/NewDataSet/Table"; 
	
    boolean isStructError_tExtractXMLField_5= true;
        
    try{
		
	    	doc_tExtractXMLField_5= reader_tExtractXMLField_5.read(new java.io.StringReader(xmlStr_tExtractXMLField_5));
	    
	    nsTool_tExtractXMLField_5.countNSMap(doc_tExtractXMLField_5.getRootElement());
	    xmlNameSpaceMap_tExtractXMLField_5 = nsTool_tExtractXMLField_5.xmlNameSpaceMap;

    	x_tExtractXMLField_5 = doc_tExtractXMLField_5.createXPath(nsTool_tExtractXMLField_5.addDefaultNSPrefix(loopQuery_tExtractXMLField_5,loopQuery_tExtractXMLField_5));
      
    	x_tExtractXMLField_5.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_5); 
    
		 
    	nodeList_tExtractXMLField_5 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tExtractXMLField_5.selectNodes(doc_tExtractXMLField_5);
    	
    	isStructError_tExtractXMLField_5 = false;
    	
    }catch(java.lang.Exception ex_tExtractXMLField_5){
    System.err.println(ex_tExtractXMLField_5.getMessage());
    }
    
    org.dom4j.Node node_tExtractXMLField_5 = null;
    String str_tExtractXMLField_5 = "";
    boolean resultIsNode_tExtractXMLField_5 = true;
    for(int i_tExtractXMLField_5=0; isStructError_tExtractXMLField_5 || (nodeList_tExtractXMLField_5!=null && i_tExtractXMLField_5 < nodeList_tExtractXMLField_5.size());i_tExtractXMLField_5++){
    	
    	if(!isStructError_tExtractXMLField_5){
			row19 = null;
    		row19 = new row19Struct();
    	
    		org.dom4j.tree.AbstractNode temp_tExtractXMLField_5 = nodeList_tExtractXMLField_5.get(i_tExtractXMLField_5);
	
	    	nb_line_tExtractXMLField_5++;	
			try{
				org.dom4j.XPath xTmp0_tExtractXMLField_5 = temp_tExtractXMLField_5.createXPath(nsTool_tExtractXMLField_5.addDefaultNSPrefix("programme_year",loopQuery_tExtractXMLField_5));
			    xTmp0_tExtractXMLField_5.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_5);
				
			    Object obj0_tExtractXMLField_5 = xTmp0_tExtractXMLField_5.evaluate(temp_tExtractXMLField_5);
			    if(obj0_tExtractXMLField_5 instanceof String || obj0_tExtractXMLField_5 instanceof Number){
			    	resultIsNode_tExtractXMLField_5 = false;
    				str_tExtractXMLField_5 = String.valueOf(obj0_tExtractXMLField_5);
   				}else{
   					resultIsNode_tExtractXMLField_5 = true;
				    node_tExtractXMLField_5 = xTmp0_tExtractXMLField_5.selectSingleNode(temp_tExtractXMLField_5);
				    str_tExtractXMLField_5 = xTmp0_tExtractXMLField_5.valueOf(temp_tExtractXMLField_5);
				}	
										if(resultIsNode_tExtractXMLField_5 && xml_api_tExtractXMLField_5.isDefNull(node_tExtractXMLField_5)){
											row19.programme_year =null;
										}else if(resultIsNode_tExtractXMLField_5 && (xml_api_tExtractXMLField_5.isEmpty(node_tExtractXMLField_5) || xml_api_tExtractXMLField_5.isMissing(node_tExtractXMLField_5))){
											row19.programme_year=null;
										}else{
				row19.programme_year = ParserUtils.parseTo_Integer(str_tExtractXMLField_5);
									}
				org.dom4j.XPath xTmp1_tExtractXMLField_5 = temp_tExtractXMLField_5.createXPath(nsTool_tExtractXMLField_5.addDefaultNSPrefix("ProjectCode",loopQuery_tExtractXMLField_5));
			    xTmp1_tExtractXMLField_5.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_5);
				
			    Object obj1_tExtractXMLField_5 = xTmp1_tExtractXMLField_5.evaluate(temp_tExtractXMLField_5);
			    if(obj1_tExtractXMLField_5 instanceof String || obj1_tExtractXMLField_5 instanceof Number){
			    	resultIsNode_tExtractXMLField_5 = false;
    				str_tExtractXMLField_5 = String.valueOf(obj1_tExtractXMLField_5);
   				}else{
   					resultIsNode_tExtractXMLField_5 = true;
				    node_tExtractXMLField_5 = xTmp1_tExtractXMLField_5.selectSingleNode(temp_tExtractXMLField_5);
				    str_tExtractXMLField_5 = xTmp1_tExtractXMLField_5.valueOf(temp_tExtractXMLField_5);
				}
									if(resultIsNode_tExtractXMLField_5 && xml_api_tExtractXMLField_5.isDefNull(node_tExtractXMLField_5)){
											row19.ProjectCode =null;
									}else if(resultIsNode_tExtractXMLField_5 && xml_api_tExtractXMLField_5.isEmpty(node_tExtractXMLField_5)){
										row19.ProjectCode ="";
									}else if(resultIsNode_tExtractXMLField_5 && xml_api_tExtractXMLField_5.isMissing(node_tExtractXMLField_5 )){ 
										row19.ProjectCode =null;
									}else{
				row19.ProjectCode = str_tExtractXMLField_5;
									}
				org.dom4j.XPath xTmp2_tExtractXMLField_5 = temp_tExtractXMLField_5.createXPath(nsTool_tExtractXMLField_5.addDefaultNSPrefix("CO2_kg",loopQuery_tExtractXMLField_5));
			    xTmp2_tExtractXMLField_5.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_5);
				
			    Object obj2_tExtractXMLField_5 = xTmp2_tExtractXMLField_5.evaluate(temp_tExtractXMLField_5);
			    if(obj2_tExtractXMLField_5 instanceof String || obj2_tExtractXMLField_5 instanceof Number){
			    	resultIsNode_tExtractXMLField_5 = false;
    				str_tExtractXMLField_5 = String.valueOf(obj2_tExtractXMLField_5);
   				}else{
   					resultIsNode_tExtractXMLField_5 = true;
				    node_tExtractXMLField_5 = xTmp2_tExtractXMLField_5.selectSingleNode(temp_tExtractXMLField_5);
				    str_tExtractXMLField_5 = xTmp2_tExtractXMLField_5.valueOf(temp_tExtractXMLField_5);
				}	
										if(resultIsNode_tExtractXMLField_5 && xml_api_tExtractXMLField_5.isDefNull(node_tExtractXMLField_5)){
											row19.CO2_kg =null;
										}else if(resultIsNode_tExtractXMLField_5 && (xml_api_tExtractXMLField_5.isEmpty(node_tExtractXMLField_5) || xml_api_tExtractXMLField_5.isMissing(node_tExtractXMLField_5))){
											row19.CO2_kg=null;
										}else{
				row19.CO2_kg = ParserUtils.parseTo_Float(str_tExtractXMLField_5);
									}
				org.dom4j.XPath xTmp3_tExtractXMLField_5 = temp_tExtractXMLField_5.createXPath(nsTool_tExtractXMLField_5.addDefaultNSPrefix("KM_travelled",loopQuery_tExtractXMLField_5));
			    xTmp3_tExtractXMLField_5.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_5);
				
			    Object obj3_tExtractXMLField_5 = xTmp3_tExtractXMLField_5.evaluate(temp_tExtractXMLField_5);
			    if(obj3_tExtractXMLField_5 instanceof String || obj3_tExtractXMLField_5 instanceof Number){
			    	resultIsNode_tExtractXMLField_5 = false;
    				str_tExtractXMLField_5 = String.valueOf(obj3_tExtractXMLField_5);
   				}else{
   					resultIsNode_tExtractXMLField_5 = true;
				    node_tExtractXMLField_5 = xTmp3_tExtractXMLField_5.selectSingleNode(temp_tExtractXMLField_5);
				    str_tExtractXMLField_5 = xTmp3_tExtractXMLField_5.valueOf(temp_tExtractXMLField_5);
				}	
										if(resultIsNode_tExtractXMLField_5 && xml_api_tExtractXMLField_5.isDefNull(node_tExtractXMLField_5)){
											row19.KM_travelled =null;
										}else if(resultIsNode_tExtractXMLField_5 && (xml_api_tExtractXMLField_5.isEmpty(node_tExtractXMLField_5) || xml_api_tExtractXMLField_5.isMissing(node_tExtractXMLField_5))){
											row19.KM_travelled=null;
										}else{
				row19.KM_travelled = ParserUtils.parseTo_Float(str_tExtractXMLField_5);
									}
}catch(java.lang.Exception ex_tExtractXMLField_5){
    System.err.println(ex_tExtractXMLField_5.getMessage());
    row19 = null;
    	}
    }
    
    isStructError_tExtractXMLField_5 = false;


   globalMap.put("tExtractXMLField_5_NB_LINE", nb_line_tExtractXMLField_5);

 


	tos_count_tExtractXMLField_5++;

/**
 * [tExtractXMLField_5 main ] stop
 */
// Start of branch "row19"
if(row19 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//row19
			//row19


			
				if(execStat){
					runStat.updateStatOnConnection("row19"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row19.programme_year != null) {
                        sb_tFileOutputDelimited_1.append(
                            row19.programme_year
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row19.ProjectCode != null) {
                        sb_tFileOutputDelimited_1.append(
                            row19.ProjectCode
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row19.CO2_kg != null) {
                        sb_tFileOutputDelimited_1.append(
                            row19.CO2_kg
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row19.KM_travelled != null) {
                        sb_tFileOutputDelimited_1.append(
                            row19.KM_travelled
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */

} // End of branch "row19"

		// end for
	}


	
		} // C_01
	









	
	/**
	 * [tSOAP_5 end ] start
	 */

	

	
	
	currentComponent="tSOAP_5";

	
soapUtil_tSOAP_5.close();

 

ok_Hash.put("tSOAP_5", true);
end_Hash.put("tSOAP_5", System.currentTimeMillis());




/**
 * [tSOAP_5 end ] stop
 */

	
	/**
	 * [tLogRow_6 end ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row20"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_6", true);
end_Hash.put("tLogRow_6", System.currentTimeMillis());




/**
 * [tLogRow_6 end ] stop
 */

	
	/**
	 * [tFilterColumns_5 end ] start
	 */

	

	
	
	currentComponent="tFilterColumns_5";

	

globalMap.put("tFilterColumns_5_NB_LINE",nb_line_tFilterColumns_5);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row17"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterColumns_5", true);
end_Hash.put("tFilterColumns_5", System.currentTimeMillis());




/**
 * [tFilterColumns_5 end ] stop
 */

	
	/**
	 * [tExtractXMLField_5 end ] start
	 */

	

	
	
	currentComponent="tExtractXMLField_5";

	



globalMap.put("tExtractXMLField_5_NB_LINE", nb_line_tExtractXMLField_5);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row18"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tExtractXMLField_5", true);
end_Hash.put("tExtractXMLField_5", System.currentTimeMillis());




/**
 * [tExtractXMLField_5 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row19"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */












						if(execStat){
							runStat.updateStatOnConnection("iterate6", 2, "exec" + NB_ITERATE_tSOAP_5);
						}				
					




	
	/**
	 * [tLoop_1 end ] start
	 */

	

	
	
	currentComponent="tLoop_1";

	


	}


 

ok_Hash.put("tLoop_1", true);
end_Hash.put("tLoop_1", System.currentTimeMillis());




/**
 * [tLoop_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLoop_1 finally ] start
	 */

	

	
	
	currentComponent="tLoop_1";

	

 



/**
 * [tLoop_1 finally ] stop
 */

	
	/**
	 * [tSOAP_5 finally ] start
	 */

	

	
	
	currentComponent="tSOAP_5";

	

 



/**
 * [tSOAP_5 finally ] stop
 */

	
	/**
	 * [tLogRow_6 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 finally ] stop
 */

	
	/**
	 * [tFilterColumns_5 finally ] start
	 */

	

	
	
	currentComponent="tFilterColumns_5";

	

 



/**
 * [tFilterColumns_5 finally ] stop
 */

	
	/**
	 * [tExtractXMLField_5 finally ] start
	 */

	

	
	
	currentComponent="tExtractXMLField_5";

	

 



/**
 * [tExtractXMLField_5 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLoop_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final intranetWebServicesCo2 intranetWebServicesCo2Class = new intranetWebServicesCo2();

        int exitCode = intranetWebServicesCo2Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = intranetWebServicesCo2.class.getClassLoader().getResourceAsStream("backup2/intranetwebservicesco2_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
            }
                context.serviceUrl=(String) context.getProperty("serviceUrl");
                context.tmpDir=(String) context.getProperty("tmpDir");
                context.outputDir=(String) context.getProperty("outputDir");
                context.intranetUsername=(String) context.getProperty("intranetUsername");
                context.intranetPassword=(String) context.getProperty("intranetPassword");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("serviceUrl")) {
                context.serviceUrl = (String) parentContextMap.get("serviceUrl");
            }if (parentContextMap.containsKey("tmpDir")) {
                context.tmpDir = (String) parentContextMap.get("tmpDir");
            }if (parentContextMap.containsKey("outputDir")) {
                context.outputDir = (String) parentContextMap.get("outputDir");
            }if (parentContextMap.containsKey("intranetUsername")) {
                context.intranetUsername = (String) parentContextMap.get("intranetUsername");
            }if (parentContextMap.containsKey("intranetPassword")) {
                context.intranetPassword = (String) parentContextMap.get("intranetPassword");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileDelete_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileDelete_1) {
globalMap.put("tFileDelete_1_SUBPROCESS_STATE", -1);

e_tFileDelete_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : intranetWebServicesCo2");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }




		









    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     79518 characters generated by Talend Open Studio for Big Data 
 *     on the 17 January 2018 17:30:07 CET
 ************************************************************************************************/